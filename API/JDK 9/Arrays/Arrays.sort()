static void sort(int[] a, int left, int right,
                     int[] work, int workBase, int workLen) {
        // Use Quicksort on small arrays
        if (right - left < QUICKSORT_THRESHOLD) {
            sort(a, left, right, true);
            return;
        }

        /*
         * Index run[i] is the start of i-th run
         * (ascending or descending sequence).
         */
        int[] run = new int[MAX_RUN_COUNT + 1];
        int count = 0; run[0] = left;
        //count是序列当中有序子序列组数，由run数组保存。[10,20,5,15,8,30]可认为是三组有序序列（从小到大）
        //count为0，run[count]指向第一个序列，而最后run会计入right+1，所以count为序列组数
        //k=right+1时也会被run数组记录，除了特别情况，见65行
        // Check if the array is nearly sorted
        for (int k = left; k < right; run[count] = k) {
            // Equal items in the beginning of the sequence去掉等值序列
            while (k < right && a[k] == a[k + 1])
                k++;
            if (k == right) break;  // Sequence finishes with equal items
            if (a[k] < a[k + 1]) { // ascending
                while (++k <= right && a[k - 1] <= a[k]);//跳过有序升序序列
            } else if (a[k] > a[k + 1]) { // descending降序序列进行倒置
                while (++k <= right && a[k - 1] >= a[k]);
                // Transform into an ascending sequence
                for (int lo = run[count] - 1, hi = k; ++lo < --hi; ) {//此处进入循环前，先会++和--
                    int t = a[lo]; a[lo] = a[hi]; a[hi] = t;
                }
            }

            // Merge a transformed descending sequence followed by an
            // ascending sequence如果降序序列翻转后的下个序列（可能升序，也可能降序，但已被翻转）能和它组成升序，则不计count
            if (run[count] > left && a[run[count]] >= a[run[count] - 1]) {
                count--;
            }

            /*
             * The array is not highly structured,
             * use Quicksort instead of merge sort.
             */
            //数组中有序子序列超过MAX_RUN_COUNT，则快排，++count同时记录子序列数
            if (++count == MAX_RUN_COUNT) {
                sort(a, left, right, true);
                return;
            }
        }

        // These invariants should hold true:
        //    run[0] = 0
        //    run[<last>] = right + 1; (terminator)
        //run最后一个记录应该是right+1
        if (count == 0) {
            // A single equal run
            return;
        } else if (count == 1 && run[count] > right) {
            //序列经整理后是一个连续序列
            // Either a single ascending or a transformed descending run.
            // Always check that a final run is a proper terminator, otherwise
            // we have an unterminated trailing run, to handle downstream.
            return;
        }
        right++;
        if (run[count] < right) {
            // Corner case: the final run is not a terminator. This may happen
            // if a final run is an equals run, or there is a single-element run
            // at the end. Fix up by adding a proper terminator at the end.
            // Note that we terminate with (right + 1), incremented earlier.
            //最后一组是等值的，或right-1下标元素即最后一个元素恰与之前序列冲突，被归为单独序列
            run[++count] = right;
        }

        // Determine alternation base for merge
        byte odd = 0;
        for (int n = 1; (n <<= 1) < count; odd ^= 1);

        // Use or create temporary array b for merging
        int[] b;                 // temp array; alternates with a
        int ao, bo;              // array offsets from 'left'
        int blen = right - left; // space needed for b
        if (work == null || workLen < blen || workBase + blen > work.length) {
            work = new int[blen];
            workBase = 0;
        }
        if (odd == 0) {
            System.arraycopy(a, left, work, workBase, blen);
            b = a;
            bo = 0;
            a = work;
            ao = workBase - left;
        } else {
            b = work;
            ao = 0;
            bo = workBase - left;
        }

        // Merging归并，每次归并完将count置为last，last是归并后的子序列数，因为还会将right加入run数组最后，并计入last
        for (int last; count > 1; count = last){
            for (int k = (last = 0) + 2; k <= count; k += 2) {//两两归并
                int hi = run[k], mi = run[k - 1];
                for (int i = run[k - 2], p = i, q = mi; i < hi; ++i) {
                    if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {
                        b[i + bo] = a[p++ + ao];
                    } else {
                        b[i + bo] = a[q++ + ao];
                    }
                }
                run[++last] = hi;
            }
            if ((count & 1) != 0) {//判断序列数量是否为奇数，是就把最后一组单独放到数组b中，
                for (int i = right, lo = run[count - 1]; --i >= lo;
                    b[i + bo] = a[i + ao]
                );
                run[++last] = right;//记得把right加入,这样count才是序列数
            }
            //交换a，b数组，因为对程序来说，每次a是要归并的，b是归并的临时空间
            int[] t = a; a = b; b = t;
            int o = ao; ao = bo; bo = o;
        }
    }
